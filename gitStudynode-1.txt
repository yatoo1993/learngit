mkdir learngit --创建文件夹learngit  1.mkdir创建（子）目录 2.touch创建文件 3.ls查看文件列表 4.pwd查看个git 环境位置 5.vi filename 查看或创建文件 ESC+:+wq!退出并保存

git init --初始化git库
git add firstgit.txt 向库里添加文件
git commit -m"my file" 提交"备注"
修改文件后
git status 查看结果
git diff 比较不同（即修改）
git add firstgit 提交修改
git status 再查看结果
git commit -m "my file v-2"再提交
git status 查看库状态

	/*
    要随时掌握工作区的状态，使用git status命令。

    如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
    */
再修改文件
git add 
git commit -m ""
git log 查看历史纪录 --pretty=online 简化显示
	/*
	commit cb926e7ea50ad11b8f9e909c05226233bf755030表示commit id (版本号)
	使用可视化工具查看Git历史
	HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示上上版本，HEAD~100表示前100版
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本
git reset --hard HEAD^ 回到上个版本
git reset --hard cd926e7 回到某版本
git checkout -- firstgit.txt 丢弃工作区的修改。把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

		总之，就是让这个文件回到最近一次git commit或git add时的状态。
		git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考$ git reset --hard ，不过前提是没有推送到远程库。
 rm file    	现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit:
		另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
		命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。扩展：rm -r 就是向下递归，不管有多少级目录，一并删除.就是直接强行删除，rm -f不作任何提示的意思
		rm -rf 直接删除不做任何提示

远程仓库操作：
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key
	ssh-keygen -t rsa -C "yatoo1993@sina.com"
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；ssh警告会出现在这样的clone方式，而https://不会警告

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

分支：
1，创建（切换）分支： git checkout -b dev 。git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
	$ git branch dev
	$ git checkout dev
2，查看当前分支：git branch	git branch命令会列出所有分支，当前分支前面会标一个*号
3,切换到主分支： git checkout master 
4,合并分支：git merge. git merge命令用于合并指定分支到当前分支。注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
5,合并完成后，就可以放心地删除dev分支了：git branch -d dev 再查看就是git branch *master  *代表现在分支
总结：
	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>
合并冲突问题：
	1，冲突的产生：我们在创建分支后进行文件修改添加内容，另一分支上也对其修改添加内容，但是两内容不一样就会产生冲突。（如果只是一方，那就没问题！）
	2，解决冲突：修改文件使其相同。
	3，$ git log --graph --pretty=oneline --abbrev-commit git log或者git status可以看到分支的合并情况
分支管理策略：
	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
bug分支：
	软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
	当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：
	
	并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
	幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：git stash
	现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。

	工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
		git stash list
		stash@{0}: WIP on dev: 6224937 add merge
		
		工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
	   	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	    	另一种方式是用git stash pop，恢复的同时把stash内容也删了：
		
		你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
		$ git stash apply stash@{0}
	开发一个新feature功能，最好新建一个分支；进行开发，修改，再合并回去

	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
多人协作：
	当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin（或者其他的，如新浪sea）。
	要查看远程库的信息，用git remote：
	用git remote -v显示更详细的信息：
		origin  git@github.com:michaelliao/learngit.git (fetch)
		origin  git@github.com:michaelliao/learngit.git (push)
	推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
		$ git push origin master
	如果要推送其他分支，比如dev，就改成：
		$ git push origin dev
	上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。
	抓取分支:
	多人协作时，大家都会往master和dev分支上推送各自的修改。
	现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：
		$ git clone git@github.com:michaelliao/learngit.git;
	当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看：
		$ git branch
		* master
	你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
	$ git checkout -b dev origin/dev